name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    services:
      pocketbase:
        image: ghcr.io/muchobien/pocketbase:latest
        ports:
          - 8090:8090
        env:
          POCKETBASE_ADMIN_EMAIL: admin@example.com
          POCKETBASE_ADMIN_PASSWORD: admin123456
       # options: >-
       #   --health-cmd "curl -f http://localhost:8090/api/health || exit 1"
       #   --health-interval 30s
       #   --health-timeout 10s
       #   --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Create environment file
      run: |
        echo "PB_URL=http://localhost:8090" >> .env
        echo "PB_EMAIL=admin@example.com" >> .env
        echo "PB_PASSWORD=admin123456" >> .env
        echo "NODE_ENV=production" >> .env

    - name: Install Playwright Browsers
      run: bunx playwright install --with-deps

    - name: Wait for PocketBase to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8090/api/health; do sleep 2; done'

    - name: Setup PocketBase
      run: |
        # Initialize PocketBase with admin user
        curl -X POST http://localhost:8090/api/admins \
          -H "Content-Type: application/json" \
          -d '{
            "email": "admin@example.com",
            "password": "admin123456",
            "passwordConfirm": "admin123456"
          }' || echo "Admin already exists"
        
        # Run any necessary database migrations
        bun run pb:migration || echo "No migrations to run"
        
    - name: Create environment file
      run: |
        echo "STRIPE_SECRET_KEY=sk_test_51N000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" >> .env
        echo "STRIPE_PUBLIC_KEY=pk_test_51N000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" >> .env
        echo "STRIPE_WEBHOOK_SECRET=whsec_51N000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" >> .env
        echo "PB_URL=http://localhost:8090" >> .env
        echo "PB_EMAIL=admin@example.com" >> .env
        echo "PB_PASSWORD=admin123456" >> .env
        echo "NODE_ENV=production" >> .env

    - name: Build application
      run: bun run build

    - name: Run Playwright tests
      run: bun run test:e2e
      env:
        CI: true
        POCKETBASE_ADMIN_EMAIL: admin@example.com
        POCKETBASE_ADMIN_PASSWORD: admin123456

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 30

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Create environment file
      run: |
        echo "STRIPE_SECRET_KEY=sk_test_51N000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" >> .env
        echo "STRIPE_PUBLIC_KEY=pk_test_51N000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" >> .env
        echo "STRIPE_WEBHOOK_SECRET=whsec_51N000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" >> .env
        echo "PB_URL=http://localhost:8090" >> .env
        echo "PB_EMAIL=admin@example.com" >> .env
        echo "PB_PASSWORD=admin123456" >> .env
        echo "NODE_ENV=production" >> .env

    # TODO: Re-enable type checking once TypeScript errors are resolved
    # - name: Run type checking
    #   run: bun run check

  # Prevent merging if tests fail
  block-merge:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: always()
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "Tests failed - blocking merge"
          exit 1
        fi
        if [[ "${{ needs.lint.result }}" == "failure" ]]; then
          echo "Linting failed - blocking merge"
          exit 1
        fi
        echo "All checks passed - merge allowed"
