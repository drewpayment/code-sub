{
  "tasks": [
    {
      "id": 1,
      "title": "Integrate Pocketbase JS SDK and Initialize Global Auth Store",
      "description": "Set up the Pocketbase JavaScript SDK within the SvelteKit application. Initialize and expose a global Svelte store to manage and react to `pb.authStore` changes.",
      "details": "Install the `pocketbase` npm package. Create a Svelte store (e.g., `src/lib/stores/authStore.js`) that initializes a Pocketbase client instance: `new PocketBase('https://pocketbase.hoytlabs.cloud/')`. The store should subscribe to `pb.authStore.onChange((token, model) => { /* update reactive store variables like currentUser, isValid */ }, true)` to reflect auth state changes. Export the `pb` instance and reactive store variables (e.g., `currentUser`, `isValid`).",
      "testStrategy": "Verify the Pocketbase client initializes without errors. Confirm the Svelte store correctly reflects the initial (logged-out) authentication state. Test that store variables update reactively when `pb.authStore` changes (can be simulated or tested after login/logout implementation).",
      "priority": "high",
      "dependencies": [],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Create User Registration Page (`/register`)",
      "description": "Develop the `/register` page with a form for users to input their name, email, and password. Implement the logic to create a new user account using the Pocketbase SDK.",
      "details": "Create a SvelteKit route for `/register`. Implement a form with input fields for `name`, `email`, `password`, and `passwordConfirm`. On submission, call `pb.collection('users').create({ name, email, password, passwordConfirm: data.passwordConfirm })`. Upon successful registration, Pocketbase typically logs the user in automatically; ensure this behavior and redirect to the homepage. Implement client-side validation for required fields, email format, and password matching. Ensure the page is responsive and visually consistent with existing design language.",
      "testStrategy": "Test successful user registration with valid data; verify user is created in Pocketbase, redirected to homepage, and auth store reflects logged-in state. Test registration with invalid data (e.g., duplicate email, mismatched passwords, missing fields) and verify appropriate error messages (from Task 4) are shown.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Create User Login Page (`/login`)",
      "description": "Develop the `/login` page with a form for users to input their email and password. Implement the logic to authenticate users using the Pocketbase SDK and manage their session.",
      "details": "Create a SvelteKit route for `/login`. Implement a form with input fields for `email` and `password`. Include a link to the password reset page (`/forgot-password`). On submission, call `pb.collection('users').authWithPassword(email, password)`. Upon successful login, redirect to the homepage. The global auth store should update automatically. Implement client-side validation for required fields. Ensure the page is responsive and visually consistent.",
      "testStrategy": "Test successful login with credentials of a user created in Task 2. Verify redirection to homepage and auth store updates. Test login with invalid credentials (wrong password, non-existent email) and verify appropriate error messages (from Task 4) are shown. Verify the 'Forgot Password?' link navigates correctly.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Implement Basic Error Handling for Authentication Operations",
      "description": "Add user-friendly error handling for common issues during registration (e.g., email already taken) and login (e.g., invalid credentials), as well as for password reset flows.",
      "details": "In the `/register` page, catch errors from `pb.collection('users').create()` and display messages like 'Email already in use' or 'Registration failed'. In the `/login` page, catch errors from `pb.collection('users').authWithPassword()` and display 'Invalid email or password'. For password reset (Tasks 6 & 7), handle errors like 'Token invalid/expired' or 'User not found'. Display errors clearly near forms or as notifications, avoiding technical jargon. This task should be integrated during the development of tasks 2, 3, 6, and 7.",
      "testStrategy": "Trigger known error conditions: register with an existing email, login with incorrect password, use an invalid password reset token. Verify that user-friendly, specific error messages are displayed and the application remains stable.",
      "priority": "medium",
      "dependencies": [
        2,
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Update Header Component for Dynamic Auth State",
      "description": "Modify the `Header.svelte` component to dynamically display different content (e.g., 'Sign In' button vs. user name and 'Logout' button) based on the user's authentication status from the global `authStore`.",
      "details": "In `Header.svelte`, subscribe to the `isValid` and `currentUser` Svelte stores from Task 1. If `isValid` is true, display the user's name (e.g., `currentUser.name` or `currentUser.email`), a link to an `/account` page, and a 'Logout' button. The 'Logout' button should call `pb.authStore.clear()` and redirect to homepage or update UI accordingly. If `isValid` is false, display 'Sign In' and 'Register' links/buttons. Ensure UI updates reactively to auth state changes.",
      "testStrategy": "Verify header shows 'Sign In'/'Register' when logged out. Log in (using Task 3 functionality) and verify header updates to show user info, account link, and 'Logout'. Click 'Logout' and verify header reverts to logged-out state and user is logged out in `authStore`.",
      "priority": "high",
      "dependencies": [
        1,
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Create Password Reset Request Page (`/forgot-password`)",
      "description": "Develop the page and logic for users to request a password reset. This involves a form to enter their email and an API call to Pocketbase to initiate the reset process.",
      "details": "Create a SvelteKit route for `/forgot-password`. Implement a form with an `email` input field. On submission, call `pb.collection('users').requestPasswordReset(email)`. Display a confirmation message to the user (e.g., 'If an account with this email exists, a password reset link has been sent.'). Ensure the page is responsive and visually consistent.",
      "testStrategy": "Request password reset for an existing user's email; verify Pocketbase sends the email (requires Pocketbase email service configuration). Request reset for a non-existent email; verify a generic success message is shown. Test form validation and error handling (Task 4).",
      "priority": "medium",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Create Password Reset Confirmation Page (`/reset-password`)",
      "description": "Develop the page and logic for users to confirm their password reset using a token received via email. This involves a form for the new password and an API call to Pocketbase.",
      "details": "Create a SvelteKit dynamic route like `/reset-password/[token]`. On page load, extract the `token` from the URL. Implement a form with `newPassword` and `newPasswordConfirm` fields. On submission, call `pb.collection('users').confirmPasswordReset(token, newPassword, newPasswordConfirm)`. On success, display a message and redirect to `/login`. Handle invalid/expired tokens gracefully (errors from Task 4). Ensure responsiveness and visual consistency.",
      "testStrategy": "Complete the flow: request reset (Task 6), use the link/token from email, and successfully set a new password. Verify redirection to login and ability to log in with the new password. Test with invalid/expired tokens. Test form validation for password fields.",
      "priority": "medium",
      "dependencies": [
        1,
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Create Basic Account Page (`/account`)",
      "description": "Develop a basic `/account` page accessible only to logged-in users. For MVP, it can display basic user information and serve as a destination for the header link.",
      "details": "Create a SvelteKit route for `/account`. Implement route protection using a `+layout.server.js` or `+page.server.js` load function that checks `pb.authStore.isValid` (or server-side equivalent by validating cookie). If not authenticated, redirect to `/login`. If authenticated, display basic user information from `pb.authStore.model` (e.g., name, email). Ensure responsiveness and visual consistency.",
      "testStrategy": "Attempt to access `/account` when logged out; verify redirection to `/login`. Log in and navigate to `/account`; verify user information is displayed and page is accessible. Verify the 'Account' link in the header (from Task 5) navigates here.",
      "priority": "medium",
      "dependencies": [
        1,
        3,
        5
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Ensure UI/UX Consistency Across New Auth Pages",
      "description": "Review and refine the UI of all new authentication pages (Login, Register, Password Reset, Account) to ensure they are responsive and visually consistent with the existing homepage's design language, including fonts, colors, and button styles.",
      "details": "Audit `/login`, `/register`, `/forgot-password`, `/reset-password/[token]`, and `/account` pages. Apply global CSS or shared Svelte components to ensure consistency in fonts, color palette, button styles, form elements, layout, and spacing, matching the existing homepage. Test responsiveness across various screen sizes (desktop, tablet, mobile).",
      "testStrategy": "Perform visual inspection of all new pages against the homepage design. Use browser developer tools to check responsiveness and consistency of applied styles. Verify common UI elements are identical or stylistically coherent across pages.",
      "priority": "medium",
      "dependencies": [
        2,
        3,
        6,
        7,
        8
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Perform End-to-End Testing of Authentication Flows",
      "description": "Conduct comprehensive end-to-end testing of the entire authentication system, covering registration, login, logout, password reset flows, and protected route access.",
      "details": "Execute full user scenarios: 1. New user registration, auto-login, header update, logout. 2. Existing user login, header update, navigation to account page, logout. 3. Forgotten password request, email link usage, password reset, login with new password. 4. Attempt to access protected `/account` page while logged out and while logged in. Verify all redirects, UI updates, and error messages behave as expected.",
      "testStrategy": "Manually execute the detailed end-to-end scenarios in a browser environment. Document any deviations from expected behavior. Check browser console for errors during these flows. Confirm all aspects of the MVP requirements are met.",
      "priority": "high",
      "dependencies": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "status": "pending",
      "subtasks": []
    }
  ]
}