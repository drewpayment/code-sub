# Task ID: 6
# Title: Create Password Reset Request Page (`/forgot-password`)
# Status: done
# Dependencies: 1
# Priority: medium
# Description: Develop the page and logic for users to request a password reset. This involves a form to enter their email and an API call to Pocketbase to initiate the reset process.
# Details:
Create a SvelteKit route for `/forgot-password`. Implement a form with an `email` input field. On submission, call `pb.collection('users').requestPasswordReset(email)`. Display a confirmation message to the user (e.g., 'If an account with this email exists, a password reset link has been sent.'). Ensure the page is responsive and visually consistent.

# Test Strategy:
Request password reset for an existing user's email; verify Pocketbase sends the email (requires Pocketbase email service configuration). Request reset for a non-existent email; verify a generic success message is shown. Test form validation and error handling (Task 4).

# Subtasks:
## 1. Implement SvelteKit Route and Password Reset Form UI [done]
### Dependencies: None
### Description: Create a SvelteKit route (e.g., /forgot-password) and build a form UI that allows users to enter their email address to request a password reset.
### Details:
Set up a SvelteKit page with a form that collects the user's email. Ensure the form uses SvelteKit's form actions or fetch to submit the request. Add basic client-side validation for the email field and display any inline validation errors.

## 2. Integrate Pocketbase Password Reset Request Logic [done]
### Dependencies: 6.1
### Description: Connect the form submission to Pocketbase's password reset request API, handling the backend logic for sending the reset email.
### Details:
On form submission, call the Pocketbase API endpoint to trigger a password reset email. Handle the API response, catching and parsing any errors (e.g., invalid email, user not found). Ensure the backend route is secure and does not leak user existence information.

## 3. Add Confirmation Messaging and Error Handling [done]
### Dependencies: 6.2
### Description: Display clear confirmation messages or error feedback to the user based on the outcome of the password reset request.
### Details:
Show a success message if the reset request is accepted (regardless of whether the email exists, for security). Display user-friendly error messages for invalid input or unexpected failures. Ensure the UI updates appropriately and the form resets or disables as needed.

