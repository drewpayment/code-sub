# Task ID: 3
# Title: Create User Login Page (`/login`)
# Status: done
# Dependencies: 1
# Priority: high
# Description: Develop the `/login` page with a form for users to input their email and password. Implement the logic to authenticate users using the Pocketbase SDK and manage their session.
# Details:
Create a SvelteKit route for `/login`. Implement a form with input fields for `email` and `password`. Include a link to the password reset page (`/forgot-password`). On submission, call `pb.collection('users').authWithPassword(email, password)`. Upon successful login, redirect to the homepage. The global auth store should update automatically. Implement client-side validation for required fields. Ensure the page is responsive and visually consistent.

# Test Strategy:
Test successful login with credentials of a user created in Task 2. Verify redirection to homepage and auth store updates. Test login with invalid credentials (wrong password, non-existent email) and verify appropriate error messages (from Task 4) are shown. Verify the 'Forgot Password?' link navigates correctly.

# Subtasks:
## 1. SvelteKit Route and Page Setup [done]
### Dependencies: None
### Description: Create the necessary SvelteKit route structure and page files for the login functionality
### Details:
Create the login route directory structure with +page.svelte and +page.server.ts files. Set up the basic page layout and ensure proper routing to and from the login page. Include navigation guards to redirect authenticated users away from the login page.

## 2. Login Form UI with Validation [done]
### Dependencies: 3.1
### Description: Design and implement the login form with client-side validation
### Details:
Create a form with email/username and password fields. Implement client-side validation to check for empty fields, valid email format, and password requirements. Add visual feedback for validation errors. Use the enhance function for progressive enhancement of the form submission.

## 3. Pocketbase Authentication Logic [done]
### Dependencies: 3.1
### Description: Implement server-side authentication using Pocketbase
### Details:
Set up Pocketbase client connection in the server context. Create authentication functions to handle user login requests. Implement proper error handling for authentication failures (invalid credentials, server errors, etc.). Return appropriate responses based on authentication results.

## 4. Session and Auth Store Management [done]
### Dependencies: 3.3
### Description: Create and manage authentication state using Svelte stores
### Details:
Create a Svelte store to manage authentication state. Implement functions to update the store when a user logs in or out. Set up session cookies or localStorage for persistent authentication. Ensure the auth state is accessible throughout the application.

## 5. Error Handling and User Messaging [done]
### Dependencies: 3.2, 3.3
### Description: Implement comprehensive error handling and user feedback
### Details:
Create a system for displaying authentication errors to users. Implement success messages for successful login. Handle different error scenarios (network issues, invalid credentials, server errors). Ensure error messages are clear and actionable for users.

## 6. Responsive and Consistent Styling [done]
### Dependencies: 3.2, 3.5
### Description: Style the login page to be responsive and match the application design
### Details:
Apply consistent styling to match the application's design system. Ensure the login form is responsive across different device sizes. Add appropriate animations for form submission and feedback. Implement accessibility features (proper contrast, focus states, ARIA attributes).

